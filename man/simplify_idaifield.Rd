% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simplify_idaifield_resources.R
\name{simplify_idaifield}
\alias{simplify_idaifield}
\title{Simplify a List Imported from an iDAI.field / Field Desktop-Database}
\usage{
simplify_idaifield(
  idaifield_docs,
  keep_geometry = FALSE,
  replace_uids = TRUE,
  find_layers = TRUE,
  uidlist = NULL,
  language = "all",
  spread_fields = TRUE,
  use_exact_dates = FALSE
)
}
\arguments{
\item{idaifield_docs}{An \code{idaifield_docs} or \code{idaifield_resources}-list as
returned by \code{\link[=get_idaifield_docs]{get_idaifield_docs()}} or \code{\link[=idf_query]{idf_query()}},
\code{\link[=idf_index_query]{idf_index_query()}}, and \code{\link[=idf_json_query]{idf_json_query()}}.}

\item{keep_geometry}{TRUE/FALSE: Should the geographical
information be kept or removed? Defaults is FALSE. Uses: \code{\link[=reformat_geometry]{reformat_geometry()}}}

\item{replace_uids}{TRUE/FALSE: Should UUIDs be automatically replaced with the
corresponding identifiers? Defaults is TRUE. Uses: \code{\link[=fix_relations]{fix_relations()}} with
\code{\link[=replace_uid]{replace_uid()}}, and also: \code{\link[=find_layer]{find_layer()}}}

\item{find_layers}{TRUE/FALSE. Default is FALSE. If TRUE, adds another column
with the 'Layer' (see \code{getOption("idaifield_categories")$layers}, can be
modified) in which a resource is contained  recursively. That means that
even if it does not immediately lie within this layer, but is
contained by one or several other resources in said layer, a new column
("liesWithinLayer") will still show the layer.
Example: A sample "A" in Find "001" from layer "Layer1" will
usually have "001" as the value in "liesWithin". With find_layers, there will
be another column called "liesWithinLayer" which contains "Layer1" for both
sample "A" and Find "001".}

\item{uidlist}{If NULL (default) the list of UUIDs and identifiers is
automatically generated within this function using \code{\link[=get_uid_list]{get_uid_list()}}. This only makes sense if
the list handed to \code{\link[=simplify_idaifield]{simplify_idaifield()}} had not been selected yet. If it
has been, you should supply a data.frame as returned
by \code{\link[=get_field_index]{get_field_index()}}.}

\item{language}{the short name (e.g. "en", "de", "fr") of the language that
is preferred for the multi-language input fields, defaults to keeping all
languages as sub-lists ("all"). Uses: \code{\link[=gather_languages]{gather_languages()}}}

\item{spread_fields}{TRUE/FALSE: Should checkbox-fields be
spread across multiple lists to facilitate boolean-columns for each value
of a checkbox-field? Default is TRUE. Uses: \code{\link[=get_configuration]{get_configuration()}},
\code{\link[=get_field_inputtypes]{get_field_inputtypes()}}, \code{\link[=convert_to_onehot]{convert_to_onehot()}}}

\item{use_exact_dates}{TRUE/FALSE: Should the values from any "exact"
dates be used in case there are any? Default is FALSE. Changes outcome of \code{\link[=fix_dating]{fix_dating()}}.}
}
\value{
An \code{idaifield_simple}-list containing the same resources in
a different format depending on the parameters used.
}
\description{
The function will take a list as returned by
\code{\link[=get_idaifield_docs]{get_idaifield_docs()}}, \code{\link[=idf_query]{idf_query()}}, \code{\link[=idf_index_query]{idf_index_query()}}, or
\code{\link[=idf_json_query]{idf_json_query()}} and process it to make the list more usable.
It will unnest a few lists, including the dimension-lists and the
period-list to provide single values for later processing with
\code{\link[=idaifield_as_matrix]{idaifield_as_matrix()}}.
If a connection to the database can be established, the function will
get the relevant project configuration and convert custom checkboxes-fields
to multiple lists, each for every value from the respective valuelist,
to make them more accessible during the conversion with
\code{\link[=idaifield_as_matrix]{idaifield_as_matrix()}}.
It will also remove the custom configuration field names that are in use
since iDAI.field 3 / Field Desktop and consist of "projectname:fieldName".
Only the "projectname:"-part will be removed.
}
\details{
Please note: The function will need an Index (i.e. uidlist as provided
by \code{\link[=get_uid_list]{get_uid_list()}}) of the complete project database to correctly replace
the UUIDs with their corresponding identifiers! Especially if a selected
list is passed to \code{\link[=simplify_idaifield]{simplify_idaifield()}}, you need to supply the uidlist
of the complete project database as well.

Formatting of various lists: Dimension measurements as well as dating are
reformatted and might produce unexpected results.
For the dating, all begin and end values are evaluated and for each resource,
the minimum value from "begin" and maximum value from "end" is selected.
For the dimension-fields, if a ranged measurement was selected, a mean
will be returned.
}
\examples{
\dontrun{
connection <- connect_idaifield(serverip = "127.0.0.1",
user = "R", pwd = "hallo")
idaifield_docs <- get_idaifield_docs(connection = connection,
projectname = "rtest")

simpler_idaifield <- simplify_idaifield(idaifield_docs)
}
}
\seealso{
\itemize{
\item This function uses: \code{\link[=idf_sepdim]{idf_sepdim()}}, \code{\link[=remove_config_names]{remove_config_names()}}
\item When find_layers = TRUE: \code{\link[=find_layer]{find_layer()}}, this only works when the function can get an index/uidlist!
\item \code{\link[=fix_dating]{fix_dating()}} with the outcome depending on the \code{use_exact_dates}-argument.
\item When selecting a language: \code{\link[=gather_languages]{gather_languages()}}
\item Depending on the \code{spread_fields}-argument: \code{\link[=convert_to_onehot]{convert_to_onehot()}}
\item Depending on the \code{keep_geometry}-argument: \code{\link[=reformat_geometry]{reformat_geometry()}}
\item Depending on the \code{replace_uids}-argument: \code{\link[=fix_relations]{fix_relations()}} with \code{\link[=replace_uid]{replace_uid()}}
\item If \code{uidlist = NULL}: \code{\link[=get_uid_list]{get_uid_list()}}
}
}
