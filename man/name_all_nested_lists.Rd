% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities.R
\name{name_all_nested_lists}
\alias{name_all_nested_lists}
\title{Recursively Assign Names to All Nested Lists Based on "name" Field}
\usage{
name_all_nested_lists(lst)
}
\arguments{
\item{lst}{A nested list structure, where sublists may contain an \code{item} sublist or
a \code{name} field.}
}
\value{
The same nested list structure, but with unnamed sublists assigned names
based on the \code{name} or \code{item$name} field values.
}
\description{
This function recursively traverses a nested list structure and assigns names
to unnamed sub-lists based on their \code{name} field or the \code{name} field contained
within an \code{item} sublist. It only assigns names if the list doesn't already have names.
}
\details{
The function looks for the following naming rules:
\enumerate{
\item If a sublist contains an \code{item} sublist and that \code{item} sublist has a \code{name} field,
the parent sublist is named based on the \code{item$name} value.
\item If a sublist contains a \code{name} field directly, the parent sublist is named based on
the \code{name} value.
\item If neither \code{item$name} nor \code{name} exists, the sublist remains unnamed.
}

The function continues to apply these rules recursively to all sublists, ensuring that
all unnamed sublists are appropriately named based on the above criteria.
}
\examples{
\dontrun{
test <- list(
  list(item = list(name = "1", value = "value1"), groups = list(
    list(name = "1a", fields = list(list(name = "1a-1"), list(name = "1a-2"))),
    list(name = "1b", fields = list(list(name = "1b-1"), list(name = "1b-2")))
  )),
  list(item = list(name = "2", value = "value1")),
  list(item = list(name = "3", value = "value1"), groups = list(
    list(name = "3a", fields = list(list(name = "3a-1"), list(name = "3a-2"))),
    list(name = "3b", fields = list(list(name = "3b-1"), list(name = "3b-2")))
  ))
)
named_list <- name_all_nested_lists(test)
print(named_list)
}

}
\keyword{internal}
