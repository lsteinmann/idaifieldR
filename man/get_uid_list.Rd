% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_uid_list.R
\name{get_uid_list}
\alias{get_uid_list}
\title{get_uid_list: Get the index of an idaifield_docs/resources object.}
\usage{
get_uid_list(
  idaifield_docs,
  verbose = FALSE,
  gather_trenches = FALSE,
  language = "all"
)
}
\arguments{
\item{idaifield_docs}{An object as returned by `get_idaifield_docs()`}

\item{verbose}{TRUE or FALSE. Defaults to FALSE. TRUE returns a list
including identifier and shortDescription which is more convenient to read,
and FALSE returns only UUID, category (former: type) and basic relations,
which is sufficient for internal use.}

\item{gather_trenches}{defaults to FALSE. If TRUE, adds another column that
records the Place each corresponding Trench and its sub-resources lie within.
(Useful for grouping the finds of several trenches, but will only work if
the project database is organized accordingly.)}

\item{language}{the short name (e.g. "en", "de", "fr") of the language that
is preferred for the multi-language input "shortDescription",
defaults to all (`language = "all"`). Will select other available languages
in alphabetical order if the selected language is not available.}
}
\value{
a data.frame with identifiers and corresponding UUIDs along with
the category (former: type), basic relations and depending on settings
place, shortDescription and "liesWithinLayer" of each element
}
\description{
All resources in the project databases in iDAI.field / Field Desktop are
stored and referenced with their Universally Unique Identifier (UUID)
in the relations fields. Therefore, for many purposes a lookup-table needs
to be provided in order to get to the actual identifiers of the resources
referenced. Single UUIDs or vectors of UUIDs can be replaced individually
using `replace_uid()` from this package.
}
\details{
This function is also good for a quick overview / a list of all the
resources that exist along with their identifiers and short descriptions
and can be used to select the resources along their respective
Categories (e.g. Pottery, Layer etc., formerly named "type").
Please note that in any case the internal names of everything will be used.
If you relabeled `Trench` to `Schnitt` in your language-configuration,
the name will still be `Trench` here. None of these functions have any
respect for language settings of a project configuration, i.e. the
front end languages of valuelists and fields are not displayed, and
instead their background names are used. You can see these in the project
configuration settings.
}
\examples{
\dontrun{
connection <- connect_idaifield(serverip = "127.0.0.1",
                                user = "R", pwd = "hallo")
idaifield_docs <- get_idaifield_docs(connection = connection,
                                     projectname = "rtest")

uidlist <- get_uid_list(idaifield_docs, verbose = TRUE)
}
}
