[{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://lsteinmann.github.io/idaifieldR/articles/Demo.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"How to use this package: Detailed Workflow","text":"Since idaifieldR available CRAN (yet), need install GitHub. can either download current release idaifieldR-GitHub page install file, conveniently use devtools remotes package install GitHub directly:","code":"require(remotes) remotes::install_github(\"lsteinmann/idaifieldR\")  library(idaifieldR)"},{"path":"https://lsteinmann.github.io/idaifieldR/articles/Demo.html","id":"loading-the-database-index","dir":"Articles","previous_headings":"","what":"Loading the Database / Index","title":"How to use this package: Detailed Workflow","text":"first step load complete database create object serves index processing. First, create connection object contain information R needs connect database server Field Desktop uses: using Field Desktop computer, need serverip-argument, defaults common localhost address. Enter password set Field Desktop-Client Tools/Werkzeuge > Settings/Einstellungen: ‘password’/‘Eigenes Passwort’ pwd. See documentation info additional arguments: want follow along tutorial directly using data, load backup file located (‘inst/testdata/rtest.jsonl’) GitHub repository new project called ‘rtest’ Field Client. demo dataset uses slightly customized project configuration demonstrate relevant functions. can get complete rtest-dataset R using get_idaifield_docs()-function projects name (projectname) connection-object named conn created earlier (connection): using RStudio, can get convenient look result using View(idaifield_test_docs) clicking list Environment-window. named nested list custom class idaifield_docs contains one element resource database reflects original json-structure. name list identifier associated resource. doc$resource sub-list contains actual entry resource, sub-lists contain information changes made resource along basic data UUID Field Desktop uses internally unique name resource. can use list visualize changes made database entries time axis sorted users, etc., continue utilize idaifieldRs functions work actual data. Though necessary processing, can use idaifieldRs check_and_unnest()-function (see ?check_and_unnest()) reduce list resource level: see now idaifield_resources object taking less memory. browsing object View(idaifield_test_resources) RStudio, can see contains information ‘resource’, .e. actual data entered Field Desktop. step automatically done idaifieldR-functions internally. get quick overview data, generate index database contains basic information object: verbose = TRUE-argument mainly includes short description entered database, language = \"en\" controls language multi-language text input field used. Switch language = \"de\" see difference demo data. can produce first plot index give us general idea data. using pipe-operator dplyr ggplot2 :  can see, demo data encompasses variety finds, recorded different “Layers” “Trenches”. get data produce useful plots, now simplify idaifield_test_resources-list.","code":"conn <- connect_idaifield(serverip = \"127.0.0.1\",                            pwd = \"hallo\") ?connect_idaifield() idaifield_test_docs <- get_idaifield_docs(connection = conn,                                            projectname = \"rtest\") idaifield_test_resources <- check_and_unnest(idaifield_test_docs) index <- get_uid_list(idaifield_test_resources,                        verbose = TRUE,                        language = \"en\") head(index) library(dplyr) library(ggplot2)  index %>%   ggplot(aes(y = liesWithin, fill = type)) +    geom_bar()"},{"path":"https://lsteinmann.github.io/idaifieldR/articles/Demo.html","id":"simplify-the-list","dir":"Articles","previous_headings":"","what":"Simplify the List","title":"How to use this package: Detailed Workflow","text":"function simplify_idaifield() takes several arguments control output. can learn documentation (?simplify_idaifield()). Mostly, suffice use defaults pass imported idaifield_docs idaifield_resources list. function also notify tries use English values multi-language input fields possible. respective input field English value, simplify_idaifield() use next available language (alphabetical order). wish keep languages multi-language input fields, can use language = \"\". keep_geometry = FALSE removes coordinate information resources. replace_uids set TRUE default replaces UUIDs data corresponding identifiers readable. Checkbox fields well campaign field automatically spread across multiple entries, stored multiple columns matrix. dislike behaviour, set argument spread_fields FALSE. process complete database function, need supply index just now, generate index. , however, choose process subset data, need supply index complete database. list now idaifield_simple class. Browse resulting list clicking Environment-window RStudio use View(idaifield_test_simple). idaifield_...-objects carry connection name project attributes later use. can view attributes(idaifield_test_simple). wish get data, recommend use list process according needs. However, idaifieldR comes function turn list matrix. , makes lot sense select data first get Pottery-resources want work . select_by()-function idaifieldR can us (see documentation ?select_by())","code":"idaifield_test_simple <- simplify_idaifield(idaifield_test_resources,                                              keep_geometry = FALSE,                                             replace_uids = TRUE,                                              uidlist = index,                                             language = \"en\",                                             spread_fields = TRUE) #> Selected language ('en') not available. Trying 'all' instead. pottery <- select_by(idaifield_test_simple, by = \"type\", value = \"Pottery\")"},{"path":"https://lsteinmann.github.io/idaifieldR/articles/Demo.html","id":"queries","dir":"Articles","previous_headings":"","what":"Queries","title":"How to use this package: Detailed Workflow","text":"outcome can achieved querying database directly. See documentation ?idf_index_query() ?idf_query(). may useful frequently want update data, large amount resources database need small subset: query-functions return idaifield_docs-lists (wish) still need simplify. need supply index uidlist-argument, otherwise UUIDs relations replaced:","code":"pottery_docs <- idf_query(conn,                            projectname = \"rtest\",                            field = \"type\",                            value = \"Pottery\") pottery_simple <- simplify_idaifield(pottery_docs, uidlist = index, language = \"en\")"},{"path":"https://lsteinmann.github.io/idaifieldR/articles/Demo.html","id":"transform-the-lists-to-a-matrix-data-frame","dir":"Articles","previous_headings":"","what":"Transform the Lists to a Matrix / data.frame","title":"How to use this package: Detailed Workflow","text":"cases, now idaifield_simple object 37 elements. , turn matrix, directly data.frame make plots easier: viewing resulting Pottery-data frame, notice campaign-field converted multiple columns. custom configuration present, happen custom checkbox-fields, way conveniently deal fields data frame. make different better use , try format original list according needs. data frame, can produce basic plots take look distribution periods across layers:  another example:","code":"pottery <- idaifield_as_matrix(pottery) %>%   as.data.frame() pottery %>%   ggplot(aes(x = relation.liesWithin, fill = period)) +    geom_bar() pottery %>%   ggplot(aes(x = vesselForm, fill = specificType)) +    geom_bar()"},{"path":"https://lsteinmann.github.io/idaifieldR/articles/Demo.html","id":"languages","dir":"Articles","previous_headings":"","what":"Languages","title":"How to use this package: Detailed Workflow","text":"currently two functions make easier replace internal names variables translations different languages: Since functions download Language configuration github.com/dainst/idai-field, advise safe result local RDS-file prepared everything. can prepare lookup-table like : get translations Project configuration, can use config-attribute idaifield_...-list. also give impression lookup-table set : can use manually replace values plots. translations valuelists can currently imported, applies names fields.","code":"core_lang_list <- download_language_list(project = \"core\", language = \"en\") milet_lang_list <- download_language_list(project = \"Milet\", language = \"en\") lookup <- get_language_lookup(core_lang_list, language = \"en\") lookup <- rbind(lookup, get_language_lookup(milet_lang_list, language = \"en\")) config <- attr(idaifield_test_simple, \"config\") lookup_conf <- get_language_lookup(config$languages, language = \"en\") head(lookup_conf)"},{"path":"https://lsteinmann.github.io/idaifieldR/articles/Demo.html","id":"tldr","dir":"Articles","previous_headings":"","what":"TLDR","title":"How to use this package: Detailed Workflow","text":"make long story short sum , two ways can get Pottery-resources R. following lines always necessary: Using following lines default arguments selecting whole database: using following lines direct queries database:","code":"conn <- connect_idaifield(pwd = \"hallo\") db <- get_idaifield_docs(connection = conn,                          projectname = \"idaifieldr-demo\") index <- get_uid_list(db) pottery <- db %>%   select_by(by = \"type\", value = \"Pottery\") %>%   # Note: simplify_idaifield() needs the index of the complete project database    # as a lookup-table to replace all UUIDs with their identifiers   simplify_idaifield(uidlist = index) %>%   idaifield_as_matrix() %>%   as.data.frame() pottery <- idf_query(connection = conn,                      project = \"idaifieldr-demo\",                       field = \"type\",                       value = \"Pottery\") %>%   idaifield_as_matrix() %>%   as.data.frame()"},{"path":"https://lsteinmann.github.io/idaifieldR/articles/TLDR.html","id":"connection-example","dir":"Articles","previous_headings":"","what":"Connection: Example","title":"TLDR: Essential Workflow","text":"","code":"conn <- connect_idaifield(pwd = \"hallo\") db <- get_idaifield_docs(connection = conn,                          projectname = \"rtest\") index <- get_uid_list(db)"},{"path":"https://lsteinmann.github.io/idaifieldR/articles/TLDR.html","id":"selection-and-simplify-example","dir":"Articles","previous_headings":"","what":"Selection and Simplify: Example","title":"TLDR: Essential Workflow","text":"Using following lines default arguments selecting whole database:","code":"library(dplyr) pottery <- db %>%   select_by(by = \"type\", value = \"Pottery\") %>%   # Note: simplify_idaifield() needs the index of the complete project database    # as a lookup-table to replace all UUIDs with their identifiers   simplify_idaifield(uidlist = index) %>%   idaifield_as_matrix() %>%   as.data.frame()"},{"path":"https://lsteinmann.github.io/idaifieldR/articles/TLDR.html","id":"query-and-simplify-example","dir":"Articles","previous_headings":"","what":"Query and Simplify: Example","title":"TLDR: Essential Workflow","text":"using following lines direct queries database:","code":"pottery <- idf_query(connection = conn,                      project = \"idaifieldr-demo\",                       field = \"type\",                       value = \"Pottery\") %>%   simplify_idaifield(uidlist = index) %>%   idaifield_as_matrix() %>%   as.data.frame()"},{"path":"https://lsteinmann.github.io/idaifieldR/articles/TLDR.html","id":"language-lookup-example","dir":"Articles","previous_headings":"","what":"Language Lookup: Example","title":"TLDR: Essential Workflow","text":"Downloading translations converting lookup table:","code":"core_lang_list <- download_language_list(project = \"core\", language = \"de\") pergamon_lang_list <- download_language_list(project = \"Pergamon\", language = \"de\") config_lang_list <- attr(db, \"config\") config_lang_list <- config_lang_list$languages  lookup <- get_language_lookup(core_lang_list, language = \"de\") lookup <- rbind(lookup, get_language_lookup(pergamon_lang_list, language = \"de\")) lookup <- rbind(lookup, get_language_lookup(config_lang_list, language = \"de\"))  head(lookup) colnames(pottery)  translated <- colnames(pottery) names(translated) <- lookup$label[match(translated, lookup$var)]  translated"},{"path":"https://lsteinmann.github.io/idaifieldR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lisa Steinmann. Author, maintainer.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Steinmann L (2023). idaifieldR: Importing Data iDAI.field R. https://github.com/lsteinmann/idaifieldR, https://lsteinmann.github.io/idaifieldR/.","code":"@Manual{,   title = {idaifieldR: Importing Data from iDAI.field into R},   author = {Lisa Steinmann},   year = {2023},   note = {https://github.com/lsteinmann/idaifieldR, https://lsteinmann.github.io/idaifieldR/}, }"},{"path":"https://lsteinmann.github.io/idaifieldR/index.html","id":"idaifieldr","dir":"","previous_headings":"","what":"Importing Data from iDAI.field into R","title":"Importing Data from iDAI.field into R","text":"idaifieldR imports data iDAI.field 2 / Field Desktop database R. core functions package use sofa (available CRAN) connect running iDAI.field 2 3 (Field Desktop) client store whole database list R (memory), avoiding csv-export otherwise needed gathering documents , possible said csv-export. R-Script using idaifieldR import database can re-run updated new data flexibly without exporting Field client . exports can automatically formatted easier processing R (e.g. UIDs replaced appropriate Identifiers, lists somewhat unnested, geometry reformatted usable sp-package). See Demo-Vignette info. However, processing resources database slow larger databases uses lot memory.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Importing Data from iDAI.field into R","text":"idaifieldR depends R-package sofa (available CRAN) needs syncing iDAI.field/Field Desktop-Client computer network work.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Importing Data from iDAI.field into R","text":"can install current version idaifieldR github using devtools remotes:","code":"devtools::install_github(\"lsteinmann/idaifieldR\", build_vignettes = TRUE)"},{"path":"https://lsteinmann.github.io/idaifieldR/index.html","id":"example--basic","dir":"","previous_headings":"","what":"Example / Basic","title":"Importing Data from iDAI.field into R","text":"basic example shows use idaifieldR. See Demo.Rmd-vignette (browseVignettes(\"idaifieldR\")), build) bit explanation TLDR.Rmd-vignette short example. example , resources/documents project “rtest” imported single list lists. building UID-List (sort Index database) “Pottery”-resources selected: select_by_type() narrows initial list one type – Pottery example – still returns list lists. (Internal names used , translations GUI work.) next step, UUIDs replaced identifiers amount unnecessary nesting reduced simplify_idaifield(). configuration available, variables checkbox-fields also converted multiple columns boolean values. can achieved querying database idf_query(). idaifield_as_matrix() produce (depending data) large matrix, every row database entry (resource) every column field, value checkbox field. matrix can easily coerced data.frame, still necessary adjust column types.","code":"library(idaifieldR) idaifield_docs <- get_idaifield_docs(projectname = \"rtest\",   connection = connect_idaifield(serverip = \"127.0.0.1\",                                  user = \"R\",                                   pwd = \"password\")) uidlist <- get_uid_list(idaifield_docs) pottery <- select_by(idaifield_docs, by = \"type\", value = \"Pottery\") pottery <- simplify_idaifield(pottery, uidlist = uidlist)  pottery_mat <- idaifield_as_matrix(pottery)  View(pottery_mat)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/bce_ce.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate a list for one dating value from iDAI.field to a positive or negative number — bce_ce","title":"Translate a list for one dating value from iDAI.field to a positive or negative number — bce_ce","text":"(Field save numbers format, apparently . corrects wrong numbers. Numbers bp/present subtracted 1950 get dates BCE.)","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/bce_ce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate a list for one dating value from iDAI.field to a positive or negative number — bce_ce","text":"","code":"bce_ce(list)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/bce_ce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate a list for one dating value from iDAI.field to a positive or negative number — bce_ce","text":"list named list containing (least): inputYear (number), inputType (\"bce\", \"ce\", \"bp\")","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/bce_ce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate a list for one dating value from iDAI.field to a positive or negative number — bce_ce","text":"year number, negative BCE, positive CE","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/bce_ce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate a list for one dating value from iDAI.field to a positive or negative number — bce_ce","text":"","code":"if (FALSE) { list <- list(inputYear = 100, inputType = \"bce\") bce_ce(list) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_and_unnest.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and unnest a list — check_and_unnest","title":"Check and unnest a list — check_and_unnest","text":"Checks list class \"idaifield_docs\" object already unnested (.e. class \"idaifield_resources\"); , . processed, idaifield_docs idaifield_resources object, issues warning returns object.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_and_unnest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and unnest a list — check_and_unnest","text":"","code":"check_and_unnest(idaifield_docs)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_and_unnest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and unnest a list — check_and_unnest","text":"idaifield_docs object used one functions package","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_and_unnest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and unnest a list — check_and_unnest","text":"already unnested, object handed . , list toplevel removed.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_and_unnest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and unnest a list — check_and_unnest","text":"","code":"if (FALSE) { idaifield_docs <- get_idaifield_docs(projectname = \"rtest\", connection = connect_idaifield(serverip = \"127.0.0.1\", user = \"R\", pwd = \"password\"))  check_and_unnest(idaifield_docs) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_for_sublist.html","id":null,"dir":"Reference","previous_headings":"","what":"check_for_sublist — check_for_sublist","title":"check_for_sublist — check_for_sublist","text":"Checks list sublists returns TRUE ","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_for_sublist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_for_sublist — check_for_sublist","text":"","code":"check_for_sublist(single_resource_field)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_for_sublist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check_for_sublist — check_for_sublist","text":"single_resource_field list checked","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_for_sublist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check_for_sublist — check_for_sublist","text":"TRUE/FALSE","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_for_sublist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"check_for_sublist — check_for_sublist","text":"# TODO absolutely stupid","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_for_sublist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"check_for_sublist — check_for_sublist","text":"","code":"if (FALSE) { list <- list(1, 2, 3, list(\"börek\", 2, 3))  check_for_sublist(list) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_if_idaifield.html","id":null,"dir":"Reference","previous_headings":"","what":"check_if_idaifield — check_if_idaifield","title":"check_if_idaifield — check_if_idaifield","text":"internal use... checks object can actually processed functions package need specific format returned core function get_idaifield_docs(...).","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_if_idaifield.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_if_idaifield — check_if_idaifield","text":"","code":"check_if_idaifield(testobject)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_if_idaifield.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check_if_idaifield — check_if_idaifield","text":"testobject object evaluated.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_if_idaifield.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check_if_idaifield — check_if_idaifield","text":"matrix allows functions determine type list object ","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_if_idaifield.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"check_if_idaifield — check_if_idaifield","text":"","code":"if (FALSE) { idaifield_docs <- get_idaifield_docs(projectname = \"rtest\", connection = connect_idaifield(serverip = \"127.0.0.1\", user = \"R\", pwd = \"password\"))  check_if_idaifield(idaifield_docs) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_if_uid.html","id":null,"dir":"Reference","previous_headings":"","what":"check_if_uid — check_if_uid","title":"check_if_uid — check_if_uid","text":"check_if_uid","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_if_uid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_if_uid — check_if_uid","text":"","code":"check_if_uid(string)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_if_uid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check_if_uid — check_if_uid","text":"string character string vector character strings checked UID used iDAI.field 2 / Field Desktop","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_if_uid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check_if_uid — check_if_uid","text":"vector length string containing TRUE corresponding item string UID, FALSE ","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/check_if_uid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"check_if_uid — check_if_uid","text":"","code":"if (FALSE) { check_if_uid(string = \"0324141a-8201-c5dc-631b-4dded4552ac4\") check_if_uid(string = \"not a uid\") }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/connect_idaifield.html","id":null,"dir":"Reference","previous_headings":"","what":"Establish a connection to the iDAI.field / Field Desktop Client — connect_idaifield","title":"Establish a connection to the iDAI.field / Field Desktop Client — connect_idaifield","text":"connection-object used establish connection database iDAI.field / Field Desktop Client. contains information needed access database using functions `get_idaifield_docs()`.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/connect_idaifield.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Establish a connection to the iDAI.field / Field Desktop Client — connect_idaifield","text":"","code":"connect_idaifield(   serverip = \"127.0.0.1\",   user = \"Anna Allgemeinperson\",   pwd = \"password\",   version = 3 )"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/connect_idaifield.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Establish a connection to the iDAI.field / Field Desktop Client — connect_idaifield","text":"serverip IP user can find Field Clients settings 'address'/'Eigene Adresse' without port-specification (':3000') user (optional) user name. currently needed. pwd Password displayed Field Clients settings 'password'/'Eigenes Passwort' version 2 iDAI.field 2 used, 3 using Field Desktop (default 3, integer).","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/connect_idaifield.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Establish a connection to the iDAI.field / Field Desktop Client — connect_idaifield","text":"`sofa`-connection object (`Cushion`)","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/connect_idaifield.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Establish a connection to the iDAI.field / Field Desktop Client — connect_idaifield","text":"using Field Desktop machine, need `serverip`-argument, defaults common localhost address. Likewise, `user`-argument currently needed access. `pwd` needs password set Field Desktop-Client Tools/Werkzeuge > Settings/Einstellungen: 'password'/'Eigenes Passwort'. default `serverip`-argument work , want access Client network running machine R, can exchange address listed password (without port (':3000')). `version`-argument need specified use current version Field Desktop (3), help connect using 'iDAI.field 2'.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/connect_idaifield.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Establish a connection to the iDAI.field / Field Desktop Client — connect_idaifield","text":"","code":"conn <- connect_idaifield(serverip = \"127.0.0.1\", user = \"R\", pwd = \"hallo\") #> Warning: Error in curl::curl_fetch_memory(x$url$url, handle = x$url$handle) :  #>   Failed to connect to 127.0.0.1 port 3001 after 0 ms: Connection refused #> : #>  #>       Is Field Desktop / iDAI.field running?"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/convert_to_coordmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts coordinate list from idaifield to a matrix — convert_to_coordmat","title":"Converts coordinate list from idaifield to a matrix — convert_to_coordmat","text":"Converts coordinate list idaifield matrix","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/convert_to_coordmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts coordinate list from idaifield to a matrix — convert_to_coordmat","text":"","code":"convert_to_coordmat(coordinates)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/convert_to_coordmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts coordinate list from idaifield to a matrix — convert_to_coordmat","text":"coordinates list format coordinateslist iDAI.field 2 / Field Desktop database","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/convert_to_coordmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts coordinate list from idaifield to a matrix — convert_to_coordmat","text":"matrix displays coordinates","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/convert_to_coordmat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts coordinate list from idaifield to a matrix — convert_to_coordmat","text":"","code":"if (FALSE) { test_2 <- list(type = \"Polygon\", coordinates = list(list(list(1), list(1)), list(list(1), list(2)), list(list(2), list(2)), list(list(1), list(1))))  convert_polygon(test_2$coordinates) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/convert_to_onehot.html","id":null,"dir":"Reference","previous_headings":"","what":"Break down a list from a checkbox field to onehot-coded values — convert_to_onehot","title":"Break down a list from a checkbox field to onehot-coded values — convert_to_onehot","text":"function helper `simplify_single_resource()`.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/convert_to_onehot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Break down a list from a checkbox field to onehot-coded values — convert_to_onehot","text":"","code":"convert_to_onehot(resource, fieldtypes)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/convert_to_onehot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Break down a list from a checkbox field to onehot-coded values — convert_to_onehot","text":"resource list one measurement fields (dimensionLength, dimensionWidth, etc.) single resource (element). config configuration list returned `get_configuration()`","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/convert_to_onehot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Break down a list from a checkbox field to onehot-coded values — convert_to_onehot","text":"resource object checkboxes seperated","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/convert_to_onehot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Break down a list from a checkbox field to onehot-coded values — convert_to_onehot","text":"","code":"if (FALSE) { conn <- connect_idaifield(serverip = \"127.0.0.1\", user = \"R\", pwd = \"hallo\") config <- get_configuration(connection = conn, projectname = \"rtest\") idaifield_resources[[1]] <- convert_to_onehot(config, idaifield_resources[[1]]) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/dot-onLoad.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — .onLoad","title":"Title — .onLoad","text":"Title","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/dot-onLoad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — .onLoad","text":"","code":".onLoad(libname, pkgname)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/dot-onLoad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — .onLoad","text":"libname libname pkgname pkgname","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/download_language_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a Language-List from GitHub — download_language_list","title":"Download a Language-List from GitHub — download_language_list","text":"function downloads language lists idai-field GitHub-repository can used supply additional lists `get_language_lookup()`.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/download_language_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a Language-List from GitHub — download_language_list","text":"","code":"download_language_list(project = \"core\", language = \"en\")"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/download_language_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a Language-List from GitHub — download_language_list","text":"project name project language files downloaded; case sensitive! match name Language-file exactly. default (\"core\") used, common language file core library downloaded. language Language short name extracted, e.g. \"en\", defaults \"en\"","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/download_language_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a Language-List from GitHub — download_language_list","text":"list can processed `get_language_lookup()`","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/download_language_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a Language-List from GitHub — download_language_list","text":"","code":"if (FALSE) { lang_list <- download_language_list(language = \"de\") }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/extract_field_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data.frame from a list of labels and descriptions from iDAI.field — extract_field_names","title":"Create a data.frame from a list of labels and descriptions from iDAI.field — extract_field_names","text":"Helper get_language_lookup()","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/extract_field_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data.frame from a list of labels and descriptions from iDAI.field — extract_field_names","text":"","code":"extract_field_names(fields_list)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/extract_field_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data.frame from a list of labels and descriptions from iDAI.field — extract_field_names","text":"fields_list named list contains one two named lists (\"label\" \"description\") translation / display language respective internal value (.e. name list) language","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/extract_field_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data.frame from a list of labels and descriptions from iDAI.field — extract_field_names","text":"data frame column \"var\" \"label\" containing value var respective translation / display value \"label\"","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/extract_field_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data.frame from a list of labels and descriptions from iDAI.field — extract_field_names","text":"","code":"if (FALSE) { fields_list <- list(\"category\" = list(\"label\" = \"Category\"), \"identifier\" = list(\"label\" = \"Name / ID (unique)\", \"description\" = \"Description of the field\")) df <- extract_field_names(fields_list) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/find_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Layer a resource is contained in — find_layer","title":"Find the Layer a resource is contained in — find_layer","text":"Warning: recursive currently error handling","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/find_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Layer a resource is contained in — find_layer","text":"","code":"find_layer(   resource = resource,   uidlist = NULL,   liesWithin = NULL,   strict = FALSE )"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/find_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Layer a resource is contained in — find_layer","text":"resource One resource (element) idaifield_resources-list. uidlist data.frame returned `get_uid_list()`. liesWithin recursion: dataframe function hands , otherwith usually NULL strict TRUE/FALSE (currently testing)","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/find_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Layer a resource is contained in — find_layer","text":"chr","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/find_layer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the Layer a resource is contained in — find_layer","text":"Helper simplify_single_resource(). Traces liesWithin fields find one Layer returns corresponding identifier. #TODO: Somehow super convoluted.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/fix_dating.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce the Dating-list to min/max-values — fix_dating","title":"Reduce the Dating-list to min/max-values — fix_dating","text":"Note: function evaluate begin end values dating resource object evaluate min max values!","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/fix_dating.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce the Dating-list to min/max-values — fix_dating","text":"","code":"fix_dating(dat_list)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/fix_dating.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce the Dating-list to min/max-values — fix_dating","text":"dat_list \"dating\"-list resource `idaifield_...`-list","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/fix_dating.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce the Dating-list to min/max-values — fix_dating","text":"reformatted list, containing min max dating additional info well original values \"comment\"-element","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/fix_dating.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce the Dating-list to min/max-values — fix_dating","text":"","code":"if (FALSE) { dat_list <- list(type = \"range\",                  begin = list(inputYear = 2000, inputType = \"bce\"),                  end = list(inputYear = 2000, inputType = \"ce\")) fix_dating(dat_list) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/fix_relations.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest the relations in a resource and replace the UUIDs with identifiers — fix_relations","title":"Unnest the relations in a resource and replace the UUIDs with identifiers — fix_relations","text":"function flatten relations list non-nested lists \"relation.\"-prefix replace UUIDs lists values corresponding identifiers uidlist using `replace_uid()` make result readable.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/fix_relations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest the relations in a resource and replace the UUIDs with identifiers — fix_relations","text":"","code":"fix_relations(resource, replace_uids = TRUE, uidlist = NULL)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/fix_relations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest the relations in a resource and replace the UUIDs with identifiers — fix_relations","text":"resource One item list class idaifield_resources replace_uids logical. TRUE, replaces UUIDs relation corresponding identifiers. FALSE, just unnests list. uidlist needs provided replace_uids = TRUE. data.frame returned `get_uid_list()`","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/fix_relations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest the relations in a resource and replace the UUIDs with identifiers — fix_relations","text":"resource relations unnested (replaced identifiers replace_uids set TRUE).","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/fix_relations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnest the relations in a resource and replace the UUIDs with identifiers — fix_relations","text":"","code":"if (FALSE) { new_relations_list <- fix_relations(resource, replace_uids = FALSE, uidlist = NULL) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/gather_languages.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather multilanguage fields — gather_languages","title":"Gather multilanguage fields — gather_languages","text":"Gather multilanguage fields","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/gather_languages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather multilanguage fields — gather_languages","text":"","code":"gather_languages(input_list, language = \"en\", silent = FALSE)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/gather_languages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather multilanguage fields — gather_languages","text":"input_list list character values containing () sublists language language short name (e.g. \"en\", \"de\", \"fr\") language preferred fields, defaults english (\"en\") silant TRUE/FALSE: gather_languages() issue messages warnings?","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/gather_languages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather multilanguage fields — gather_languages","text":"vector containing values","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/gather_languages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gather multilanguage fields — gather_languages","text":"","code":"if (FALSE) { input_list <- list(list(\"en\" = \"English text\", \"de\" = \"Deutscher Text\"),                    list(\"en\" = \"Another english text\", \"de\" = \"Weiterer dt. Text\")) gather_languages(input_list, language = \"de\") }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_configuration.html","id":null,"dir":"Reference","previous_headings":"","what":"get_configuration: returns configuration list — get_configuration","title":"get_configuration: returns configuration list — get_configuration","text":"function retrieves project configuration (existent) iDAI.field project.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_configuration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_configuration: returns configuration list — get_configuration","text":"","code":"get_configuration(connection, projectname = \"rtest\")"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_configuration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_configuration: returns configuration list — get_configuration","text":"connection connection object returned `connect_idaifield()` projectname name project Field Client one wishes load.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_configuration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_configuration: returns configuration list — get_configuration","text":"list containing project configuration; NA configuration found","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_configuration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_configuration: returns configuration list — get_configuration","text":"","code":"if (FALSE) { conn <- connect_idaifield(serverip = \"127.0.0.1\", user = \"R\", pwd = \"hallo\") config <- get_configuration(connection = conn, projectname = \"rtest\") }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_field_inputtypes.html","id":null,"dir":"Reference","previous_headings":"","what":"get_field_inputtypes: returns a matrix of inputTypes — get_field_inputtypes","title":"get_field_inputtypes: returns a matrix of inputTypes — get_field_inputtypes","text":"function retrieves matrix containing inputTypes fields corresponding inputTypes project configuration (existent) iDAI.field project.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_field_inputtypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_field_inputtypes: returns a matrix of inputTypes — get_field_inputtypes","text":"","code":"get_field_inputtypes(config, inputType = \"all\")"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_field_inputtypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_field_inputtypes: returns a matrix of inputTypes — get_field_inputtypes","text":"config configuration list returned `get_configuration()` inputType specified, matrix filtered return specified type","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_field_inputtypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_field_inputtypes: returns a matrix of inputTypes — get_field_inputtypes","text":"matrix fields given inputType","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_field_inputtypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_field_inputtypes: returns a matrix of inputTypes — get_field_inputtypes","text":"","code":"if (FALSE) { conn <- connect_idaifield(serverip = \"127.0.0.1\", user = \"R\", pwd = \"hallo\") config <- get_configuration(connection = conn, projectname = \"rtest\") checkboxes <- get_field_inputtypes(config, inputType = \"checkboxes\") }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_idaifield_docs.html","id":null,"dir":"Reference","previous_headings":"","what":"get_idaifield_docs: Import all docs from an iDAI.field / Field Desktop project — get_idaifield_docs","title":"get_idaifield_docs: Import all docs from an iDAI.field / Field Desktop project — get_idaifield_docs","text":"Imports docs idaifield-database currently running synching list-object processing R. wraps **sofa**s functions slightly processes output. function useful import iDAI.field 2 Field Desktop respective client running computer R-script. using `raw = TRUE` (default) function allow get changelog resource, .e. user changed something resource time created . Setting raw FALSE return list actual data. can later time using `check_and_unnest()` package.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_idaifield_docs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_idaifield_docs: Import all docs from an iDAI.field / Field Desktop project — get_idaifield_docs","text":"","code":"get_idaifield_docs(   connection = connect_idaifield(serverip = \"127.0.0.1\", user = \"R\", pwd = \"hallo\"),   projectname = \"projectname\",   raw = TRUE,   json = FALSE )"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_idaifield_docs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_idaifield_docs: Import all docs from an iDAI.field / Field Desktop project — get_idaifield_docs","text":"connection connection object returned `connect_idaifield()` projectname name project Field Client one wishes load. raw default FALSE. wish get unnested version resources, without metadata (.e. changes user), set TRUE json default FALSE; TRUE output simplified functions package instead list returned json format can freely manipulated using e.g. jsonlite package. (Might useful users.)","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_idaifield_docs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_idaifield_docs: Import all docs from an iDAI.field / Field Desktop project — get_idaifield_docs","text":"object (list) class \"idaifield_docs\" raw = TRUE \"idaifield_resources\" raw = FALSE contains docs/resources selected project except Project Configuration. connection, projectname configuration attached attributes later use.(json set TRUE, returns character string json-format.)","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_idaifield_docs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get_idaifield_docs: Import all docs from an iDAI.field / Field Desktop project — get_idaifield_docs","text":"NOTE: planning using coordinates stored database, strongly suggest consider changing R digits-setting higher value default. Depending projection used, coordinates may represented rather long numbers R might automatically round import. `options(digits = 20)` trick. (applies fields containing long numbers well.)","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_idaifield_docs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_idaifield_docs: Import all docs from an iDAI.field / Field Desktop project — get_idaifield_docs","text":"","code":"if (FALSE) { conn <- connect_idaifield(serverip = \"127.0.0.1\", user = \"R\", pwd = \"hallo\") idaifield_docs <- get_idaifield_docs(connection = conn, projectname = \"rtest\") }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_language_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"get_language_lookup(): Prepare a Language List as a Lookup Table — get_language_lookup","title":"get_language_lookup(): Prepare a Language List as a Lookup Table — get_language_lookup","text":"get_language_lookup(): Prepare Language List Lookup Table","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_language_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_language_lookup(): Prepare a Language List as a Lookup Table — get_language_lookup","text":"","code":"get_language_lookup(lang_list, language = \"en\")"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_language_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_language_lookup(): Prepare a Language List as a Lookup Table — get_language_lookup","text":"lang_list list format used iDAI.fields configuration, containing separate list language short name (e.g. \"en\", \"de\") \"commons\", \"categories\" etc. lists contained. language Language short name extracted, e.g. \"en\", defaults \"en\"","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_language_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_language_lookup(): Prepare a Language List as a Lookup Table — get_language_lookup","text":"data.frame can serve lookup table, background name \"var\" column, selected language \"label\" column.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_language_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_language_lookup(): Prepare a Language List as a Lookup Table — get_language_lookup","text":"","code":"if (FALSE) { conn <- connect_idaifield(serverip = \"127.0.0.1\",                           user = \"R\", pwd = \"hallo\") config <- get_configuration(connection = conn, projectname = \"rtest\") lookup <- get_language_lookup(config$languages, language = \"en\") }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_uid_list.html","id":null,"dir":"Reference","previous_headings":"","what":"get_uid_list: Get the index of an idaifield_docs/resources object. — get_uid_list","title":"get_uid_list: Get the index of an idaifield_docs/resources object. — get_uid_list","text":"resources project databases iDAI.field / Field Desktop stored referenced Universally Unique Identifier (UUID) relations fields. Therefore, many purposes lookup-table needs provided order get actual identifiers resources referenced. Single UUIDs vectors UUIDs can replaced individually using `replace_uid()` package.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_uid_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_uid_list: Get the index of an idaifield_docs/resources object. — get_uid_list","text":"","code":"get_uid_list(   idaifield_docs,   verbose = FALSE,   gather_trenches = FALSE,   language = \"en\" )"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_uid_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_uid_list: Get the index of an idaifield_docs/resources object. — get_uid_list","text":"idaifield_docs object returned `get_idaifield_docs()` verbose TRUE FALSE. Defaults FALSE. TRUE returns list including identifier shortDescription convenient read, FALSE returns UUID, type (category) basic relations, sufficient internal use. gather_trenches defaults FALSE. TRUE, adds another column records Place corresponding Trench sub-resources lie within. (Useful grouping finds several trenches, work project database organized accordingly.) language short name (e.g. \"en\", \"de\", \"fr\") language preferred multi-language input \"shortDescription\", defaults english (\"en\") select available languages alphabetical order selected language available.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_uid_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_uid_list: Get the index of an idaifield_docs/resources object. — get_uid_list","text":"data.frame identifiers corresponding UUIDs along type (category), basic relations depending settings place shortDescription element","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_uid_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get_uid_list: Get the index of an idaifield_docs/resources object. — get_uid_list","text":"function also good quick overview / list resources exist along identifiers short descriptions can used select resources along respective Types/Categories (e.g. Pottery, Layer etc.). Please note case internal names everything used. relabeled `Trench` `Schnitt` language-configuration, name still `Trench` . None functions respect language settings project configuration, .e. front end languages valuelists fields displayed, instead background names used. can see project configuration settings.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/get_uid_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_uid_list: Get the index of an idaifield_docs/resources object. — get_uid_list","text":"","code":"if (FALSE) { connection <- connect_idaifield(serverip = \"127.0.0.1\",                                 user = \"R\", pwd = \"hallo\") idaifield_docs <- get_idaifield_docs(connection = connection,                                      projectname = \"rtest\")  uidlist <- get_uid_list(idaifield_docs, verbose = TRUE) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idaifield_as_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"idaifield_as_matrix — idaifield_as_matrix","title":"idaifield_as_matrix — idaifield_as_matrix","text":"Converts list class `idaifield_docs`, `idaifield_resource` `idaifield_simple` matrix. Recomennded use `idaifield_simple`-lists returned `simplify_idaifield()`. given list class `idaifield_docs` containing meta-info, automatically unnest resource level. recommended select list first using `select_by()` package reduce amount columns returned. See example.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idaifield_as_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"idaifield_as_matrix — idaifield_as_matrix","text":"","code":"idaifield_as_matrix(idaifield)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idaifield_as_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"idaifield_as_matrix — idaifield_as_matrix","text":"idaifield object returned `get_idaifield_docs(...)`, `check_and_unnest(...)` `simplify_idaifield(...)`","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idaifield_as_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"idaifield_as_matrix — idaifield_as_matrix","text":"matrix (depending selection project database can large)","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idaifield_as_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"idaifield_as_matrix — idaifield_as_matrix","text":"","code":"if (FALSE) { connection <- connect_idaifield(serverip = \"127.0.0.1\",                                 user = \"R\",                                 pwd = \"hallo\") idaifield_docs <- get_idaifield_docs(connection = connection,                                      projectname = \"rtest\") pottery <- select_by(idaifield_docs, by = \"type\", value = \"Pottery\") pottery <- simplify_idaifield(pottery,                               uidlist = get_uid_list(idaifield_docs)) pottery <- idaifield_as_matrix(pottery) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idaifieldr_demodata.html","id":null,"dir":"Reference","previous_headings":"","what":"idaifieldR Demodata — idaifieldr_demodata","title":"idaifieldR Demodata — idaifieldr_demodata","text":"Test demonstration data illustrate packages functionality, real world representation.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idaifieldr_demodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"idaifieldR Demodata — idaifieldr_demodata","text":"","code":"idaifieldr_demodata"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idaifieldr_demodata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"idaifieldR Demodata — idaifieldr_demodata","text":"## `idaifieldr_demodata` list (idaifield_docs) 108 elements: identifier identifier / Kurzbezeichner values entries field database","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idaifieldr_demodata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"idaifieldR Demodata — idaifieldr_demodata","text":"Random collection imagined data","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_index_query.html","id":null,"dir":"Reference","previous_headings":"","what":"idf_index_query — idf_index_query","title":"idf_index_query — idf_index_query","text":"Queries resources iDAI.field database currently running","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_index_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"idf_index_query — idf_index_query","text":"","code":"idf_index_query(   connection,   projectname = \"NULL\",   field = \"type\",   value = \"Brick\",   uidlist = NULL )"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_index_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"idf_index_query — idf_index_query","text":"connection connection object returned `connect_idaifield()` projectname name project queried. field resource field selected (options limited columns names uidlist). value value selected specified field. uidlist data.frame returned `get_uid_list()`.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_index_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"idf_index_query — idf_index_query","text":"'idaifield_docs' list","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_index_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"idf_index_query — idf_index_query","text":"","code":"if (FALSE) { conn <- connect_idaifield(pwd = \"hallo\") uidlist <- get_uid_list(conn, projectname = \"rtest\") idf_index_query(conn, projectname = \"rtest\", field = \"type\", value = \"Brick\", uidlist = uidlist) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_ping.html","id":null,"dir":"Reference","previous_headings":"","what":"Ping the Field-Database — idf_ping","title":"Ping the Field-Database — idf_ping","text":"Helper functions access database display specific warning messages.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_ping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ping the Field-Database — idf_ping","text":"","code":"idf_ping(idaifield_connection)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_ping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ping the Field-Database — idf_ping","text":"idaifield_connection connection returned `connect_idaifield()` fail function stop execution?","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_ping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ping the Field-Database — idf_ping","text":"returns value","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_ping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ping the Field-Database — idf_ping","text":"","code":"if (FALSE) { idaifield_connection <- connect_idaifield() idf_ping(idaifield_connection) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_query.html","id":null,"dir":"Reference","previous_headings":"","what":"idf_query — idf_query","title":"idf_query — idf_query","text":"Queries resources iDAI.field database currently running","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"idf_query — idf_query","text":"","code":"idf_query(connection, projectname = \"NULL\", field = \"type\", value = \"Pottery\")"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"idf_query — idf_query","text":"connection connection object returned `connect_idaifield()` projectname name project queried. field resource field selected (.e. \"type\" type resource (Pottery, Brick, Layer)). value value selected specified field (.e. \"Brick\" looking resourced type \"Brick\").","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"idf_query — idf_query","text":"'idaifield_docs' list","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"idf_query — idf_query","text":"","code":"if (FALSE) { conn <- connect_idaifield(pwd = \"hallo\") idf_query(conn, projectname = \"rtest\", field = \"type\", value = \"Brick\") }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_sepdim.html","id":null,"dir":"Reference","previous_headings":"","what":"Break down a list from a dimension field to a single value — idf_sepdim","title":"Break down a list from a dimension field to a single value — idf_sepdim","text":"function helper `simplify_single_resource()`.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_sepdim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Break down a list from a dimension field to a single value — idf_sepdim","text":"","code":"idf_sepdim(dimensionList, name = \"dimensionLength\")"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_sepdim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Break down a list from a dimension field to a single value — idf_sepdim","text":"dimensionList list one measurement fields (dimensionLength, dimensionWidth, etc.) single resource (element). name name corresponding dimension List.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_sepdim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Break down a list from a dimension field to a single value — idf_sepdim","text":"list containing simple values measured dimension list; note: range entered, returns mean without comment.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/idf_sepdim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Break down a list from a dimension field to a single value — idf_sepdim","text":"","code":"if (FALSE) { dimensionLength_new <- idf_sepdim(idaifield_resources[[1]]$dimensionLength, \"dimensionLength\") }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/na_if_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"na_if_empty: returns NA if an object handed to the function is empty — na_if_empty","title":"na_if_empty: returns NA if an object handed to the function is empty — na_if_empty","text":"helper function defense empty list items iDAI.field 2 / Field Desktop, sometimes occur. simply writes NA corresponding field list kind object handed length 0. Otherwise, returns input untouched.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/na_if_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"na_if_empty: returns NA if an object handed to the function is empty — na_if_empty","text":"","code":"na_if_empty(item)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/na_if_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"na_if_empty: returns NA if an object handed to the function is empty — na_if_empty","text":"item object whatsoever","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/na_if_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"na_if_empty: returns NA if an object handed to the function is empty — na_if_empty","text":"NA empty, object handed ","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/na_if_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"na_if_empty: returns NA if an object handed to the function is empty — na_if_empty","text":"","code":"if (FALSE) { na_if_empty(1) na_if_empty(list(2,3,4,list(4,5,4))) na_if_empty(NULL) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/reformat_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"reformat the geometry of an iDAI.field resource — reformat_geometry","title":"reformat the geometry of an iDAI.field resource — reformat_geometry","text":"reformat geometry iDAI.field resource","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/reformat_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reformat the geometry of an iDAI.field resource — reformat_geometry","text":"","code":"reformat_geometry(geometry)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/reformat_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reformat the geometry of an iDAI.field resource — reformat_geometry","text":"geometry list docs$resource$geometry","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/reformat_geometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reformat the geometry of an iDAI.field resource — reformat_geometry","text":"data handy format can processed tools like sp-package produce polygons etc.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/reformat_geometry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"reformat the geometry of an iDAI.field resource — reformat_geometry","text":"","code":"test_2 <- list(type = \"Polygon\", coordinates = list(list(list(1), list(1)), list(list(1), list(2)), list(list(2), list(2)), list(list(1), list(1))))  reformat_geometry(test_2) #> $type #> [1] \"Polygon\" #>  #> $coordinates #> $coordinates[[1]] #>      [,1] [,2] [,3] #> [1,]    1    1    0 #> [2,]    1    2    0 #> [3,]    2    2    0 #> [4,]    1    1    0 #>  #>"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/remove_config_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove everything before the : in a character vector — remove_config_names","title":"Remove everything before the : in a character vector — remove_config_names","text":"function helper `simplify_single_resource()`.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/remove_config_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove everything before the : in a character vector — remove_config_names","text":"","code":"remove_config_names(nameslist = c(\"identifier\", \"configname:test\"))"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/remove_config_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove everything before the : in a character vector — remove_config_names","text":"nameslist character vector","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/remove_config_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove everything before the : in a character vector — remove_config_names","text":"character vector without everything \":\" including \":\"","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/remove_config_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove everything before the : in a character vector — remove_config_names","text":"","code":"if (FALSE) { nameslist <- c(\"relation.liesWithin\",\"relation.liesWithinLayer\", \"campaign.2022\",\"milet:test\") nameslist <- remove_config_names(nameslist) nameslist }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/reorder_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorders the column names for idaifield_as_matrix() — reorder_colnames","title":"Reorders the column names for idaifield_as_matrix() — reorder_colnames","text":"Reorders column names idaifield_as_matrix()","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/reorder_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorders the column names for idaifield_as_matrix() — reorder_colnames","text":"","code":"reorder_colnames(colnames, order = \"default\")"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/reorder_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorders the column names for idaifield_as_matrix() — reorder_colnames","text":"colnames character vector colnames order either \"default\" default order (first columns \"identifier\", \"type\", \"shortDescription\" rest assembled) character vector exact column names place first n columns matrix produced idaifield_as_matrix()","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/reorder_colnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorders the column names for idaifield_as_matrix() — reorder_colnames","text":"character vector","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/reorder_colnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorders the column names for idaifield_as_matrix() — reorder_colnames","text":"","code":"if (FALSE) { colnames <- c(\"materialType\", \"identifier\", \"shortDescription\", \"type\")  reorder_colnames(colnames, order = \"default\") }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/replace_uid.html","id":null,"dir":"Reference","previous_headings":"","what":"replace_uid — replace_uid","title":"replace_uid — replace_uid","text":"handed item (vector single variable) first checks actually UUID defined check_if_uid() , replaces corresponding identifier uidlist (also handed function).","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/replace_uid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"replace_uid — replace_uid","text":"","code":"replace_uid(uidvector, uidlist)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/replace_uid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"replace_uid — replace_uid","text":"uidvector vector UUIDs replaced identifiers uidlist uidlist resp. index returned get_uid_list()","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/replace_uid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"replace_uid — replace_uid","text":"corresponding identifier(s) (character string/vector)","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/replace_uid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"replace_uid — replace_uid","text":"","code":"if (FALSE) { uidlist <- get_uid_list(idaifield_docs)  replace_uid(\"9e436b96-134d-e610-c032-136fc9e8e26e\", uidlist = uidlist) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/select_by.html","id":null,"dir":"Reference","previous_headings":"","what":"select_by — select_by","title":"select_by — select_by","text":"returns subset docs list selected type isRecordedIn","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/select_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"select_by — select_by","text":"","code":"select_by(idaifield_docs, by = c(\"type\", \"isRecordedIn\"), value = NULL)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/select_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"select_by — select_by","text":"idaifield_docs object returned get_idaifield_docs(...) must either type (select resource type) isRecordedIn (select container-resource (Survey-Area, Trench)) value Character expected, internal Name Type selected (e.g. \"Layer\", \"Pottery\"), can vector multiple Types / Operations","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/select_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"select_by — select_by","text":"list class idaifield_resources containing resources selected type","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/select_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"select_by — select_by","text":"","code":"if (FALSE) { connection <- connect_idaifield(serverip = \"127.0.0.1\", user = \"R\", pwd = \"hallo\") idaifield_docs <- get_idaifield_docs(connection = connection, projectname = \"rtest\")  idaifield_layers <- select_by_type(idaifield_docs, by = \"type\", value = \"Layer\") }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/show_type_list.html","id":null,"dir":"Reference","previous_headings":"","what":"show_type_list — show_type_list","title":"show_type_list — show_type_list","text":"Returns list types present iDAI.field 2 / Field Desktop database.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/show_type_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show_type_list — show_type_list","text":"","code":"show_type_list(idaifield_docs)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/show_type_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"show_type_list — show_type_list","text":"idaifield_docs object returned `get_idaifield_docs(...)`; unnests resource level already happen.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/show_type_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"show_type_list — show_type_list","text":"character vector types represented idaifield_docs/resource","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/show_type_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"show_type_list — show_type_list","text":"","code":"if (FALSE) { connection <- connect_idaifield(serverip = \"127.0.0.1\",                                 user = \"R\",                                 pwd = \"hallo\") idaifield_docs <- get_idaifield_docs(connection = connection,                                      projectname = \"rtest\")  show_type_list(idaifield_docs) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/simplify_idaifield.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify a list imported from an iDAI.field-Database — simplify_idaifield","title":"Simplify a list imported from an iDAI.field-Database — simplify_idaifield","text":"function take list returned `get_idaifield_docs()` process make list useable. unnest view lists, including dimension-lists period-list provide single values later processing `idaifield_as_matrix()`. connection database can established, function get relevant project configuration convert custom checkboxes-fields multiple lists, every value respective valuelist, make accessible conversion `idaifield_as_matrix()`. also remove custom configuration field names use since iDAI.field 3 / Field Desktop consist \"projectname:fieldName\". \"projectname:\"-part removed.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/simplify_idaifield.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify a list imported from an iDAI.field-Database — simplify_idaifield","text":"","code":"simplify_idaifield(   idaifield_docs,   keep_geometry = TRUE,   replace_uids = TRUE,   uidlist = NULL,   language = \"all\",   spread_fields = TRUE )"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/simplify_idaifield.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplify a list imported from an iDAI.field-Database — simplify_idaifield","text":"idaifield_docs \"idaifield_docs\" \"idaifield_resources\"-list returned `get_idaifield_docs()`. keep_geometry logical. (Defaults TRUE) geographical information kept removed? replace_uids logical. UUIDs automatically replaced corresponding identifiers? (Defaults TRUE). uidlist NULL (default) list UIDs identifiers automatically generated within function. makes sense list handed `simplify_idaifield()` selected yet. , supply data.frame returned `get_uid_list()`. language short name (e.g. \"en\", \"de\", \"fr\") language preferred multi-language input fields, defaults keeping languages sub-lists (\"\"). spread_fields logical. (Defaults TRUE) checkbox-fields spread across multiple lists facilitate boolean-columns value checkbox-field?","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/simplify_idaifield.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplify a list imported from an iDAI.field-Database — simplify_idaifield","text":"\"idaifield_simple\" list","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/simplify_idaifield.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simplify a list imported from an iDAI.field-Database — simplify_idaifield","text":"Please note: function need Index (.e. uidlist provided `get_uid_list()`) complete project database correctly replace UUIDs corresponding identifiers! Especially selected list passed `simplify_idaifield()`, need supply uidlist complete project database well. Formatting various lists: Dimension measurements well dating reformatted might produce unexpected results. dating, begin end values evaluated resource, minimum value \"begin\" maximum value \"end\" selected. dimension-fields, ranged measurement selected, mean returned. #TODO: category currently renamed type. Please aware: changed point reflect actual database . Scripts may work anymore without intervention.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/simplify_idaifield.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplify a list imported from an iDAI.field-Database — simplify_idaifield","text":"","code":"if (FALSE) { connection <- connect_idaifield(serverip = \"127.0.0.1\", user = \"R\", pwd = \"hallo\") idaifield_docs <- get_idaifield_docs(connection = connection, projectname = \"rtest\")  simpler_idaifield <- simplify_idaifield(idaifield_docs) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/simplify_single_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplifies a single resource from the iDAI.field 2 / Field Desktop Database — simplify_single_resource","title":"Simplifies a single resource from the iDAI.field 2 / Field Desktop Database — simplify_single_resource","text":"function helper `simplify_idaifield()`.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/simplify_single_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplifies a single resource from the iDAI.field 2 / Field Desktop Database — simplify_single_resource","text":"","code":"simplify_single_resource(   resource,   replace_uids = TRUE,   uidlist = NULL,   keep_geometry = TRUE,   fieldtypes = NULL,   language = \"all\",   spread_fields = TRUE )"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/simplify_single_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplifies a single resource from the iDAI.field 2 / Field Desktop Database — simplify_single_resource","text":"resource One resource (element) idaifield_resources-list. replace_uids see `?simplify_idaifield()` uidlist see `?simplify_idaifield()` keep_geometry see `?simplify_idaifield()` language see `?simplify_idaifield()` spread_fields see `?simplify_idaifield()`","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/simplify_single_resource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplifies a single resource from the iDAI.field 2 / Field Desktop Database — simplify_single_resource","text":"single resource (element) idaifield_resource-list.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/simplify_single_resource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplifies a single resource from the iDAI.field 2 / Field Desktop Database — simplify_single_resource","text":"","code":"if (FALSE) { simpler_resource <- simplify_single_resource(resource, replace_uids = TRUE, uidlist = uidlist, keep_geometry = FALSE) }"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/unnest_docs.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnesting a idaifield_docs-List down to resource level — unnest_docs","title":"Unnesting a idaifield_docs-List down to resource level — unnest_docs","text":"function unnests lists provided iDAI.field 2 / Field Desktop. actual data resource usually stored sub-list behind $doc$resource, contains data one mostly want work R. top level data contains information created modified resource time irrelevant analysis database contents .","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/unnest_docs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnesting a idaifield_docs-List down to resource level — unnest_docs","text":"","code":"unnest_docs(idaifield_docs)"},{"path":"https://lsteinmann.github.io/idaifieldR/reference/unnest_docs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnesting a idaifield_docs-List down to resource level — unnest_docs","text":"idaifield_docs list provided `get_idaifield_docs()`. `get_idaifield_docs()` employs function already setting `raw = FALSE`.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/unnest_docs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnesting a idaifield_docs-List down to resource level — unnest_docs","text":"list class idaifield_resources (idaifield_docs, top-level meta-information removed make actual resource data accessible)","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/reference/unnest_docs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnesting a idaifield_docs-List down to resource level — unnest_docs","text":"","code":"if (FALSE) { connection <- connect_idaifield(serverip = \"127.0.0.1\", user = \"R\", pwd = \"hallo\") idaifield_docs <- get_idaifield_docs(connection = connection, projectname = \"rtest\", simplified = FALSE)  idaifield_resources <- unnest_docs(idaifield_docs) }"},{"path":[]},{"path":"https://lsteinmann.github.io/idaifieldR/news/index.html","id":"new-0-2-4","dir":"Changelog","previous_headings":"","what":"new:","title":"idaifieldR 0.2.4 2023-03-31","text":"handle / reformat dating fields getting min max date","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/news/index.html","id":"fixes-0-2-4","dir":"Changelog","previous_headings":"","what":"fixes:","title":"idaifieldR 0.2.4 2023-03-31","text":"get type category type empty get_uid_list() multiple queries idf_query() type & category simplify_idaifield(), category currently switched type, changed later -> #TODO: rename type everywhere category reflect actual db structure","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/news/index.html","id":"idaifieldr-023-2023-03-16","dir":"Changelog","previous_headings":"","what":"idaifieldR 0.2.3 2023-03-16","title":"idaifieldR 0.2.3 2023-03-16","text":"add language management multi-language input fields project one project language add language list lookup preparation (get_language_lookup()) custom config fields add download_language_list() get current translations GitHub add ping-checks database-related functions supply custom error messages get_idaifield_docs() now remove Configuration doc attach attribute custom classes, thus simplify_idaifield() use config-attribute directly works without connection. simplify_idaifield() now allows keep checkbox-fields etc. -change idf_query() idf_index_query() return docs instead simplified list allow choice idaifield_...-lists now named (identifier resource) new demodata future use (data(\"idaifieldr_demodata\")) rewritten vignettes generally updated documentation Notice: changes may created problems iDAI.field 2, test using package iDAI.field 2, assume used anymore. get_idaifield_docs() still work.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/news/index.html","id":"idaifieldr-022-2023-02-18","dir":"Changelog","previous_headings":"","what":"idaifieldR 0.2.2 2023-02-18","title":"idaifieldR 0.2.2 2023-02-18","text":"config specific names now removed everywhere fixed problem -condition config exists fixed problem calculation means ranged measurements comments code places speed find_layer(), replace_uid() check_if_uid() tests","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/news/index.html","id":"idaifieldr-021-2022-10-23","dir":"Changelog","previous_headings":"","what":"idaifieldR 0.2.1 2022-10-23","title":"idaifieldR 0.2.1 2022-10-23","text":"Fixed find_layer() (internal), seems work intended now. editor project configuration iDAI.field 3, new fields objects started named according configurations, e.g. “milet:temperType” etc., fields newly created. now config specific names removed fields, part double dot remains (e.g. “milet:temperType” becomes “temperType”). check_if_uid() now handles vectors Speed get_uid_list(), replace_uid(), convert_to_onehot(), fix_relations() (lot) split import get_idaifield_docs() processing usable simplify_idaifield(), advice use latter subsets time manageable. add check_and_unnest() export","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/news/index.html","id":"idaifieldr-020-2022-05-15","dir":"Changelog","previous_headings":"","what":"idaifieldR 0.2.0 2022-05-15","title":"idaifieldR 0.2.0 2022-05-15","text":"Version number changed 0.2, reflect rather dramatic changes. Faster get_uid_list() using lapply() Added idf_query() specifically query db groups without first downloading everything Added idf_index_query() specifically query db things available uidlist (needs uidlist ) simplified = TRUE (simplify_idaifield()) now convert checkbox field multiple columns. probably make option future, need clean function first (TODO). make possible import configuration file (needed new functions; work idaifield3 , hopefully); connection projectname now attributes “idaifield_docs” “idaifield_resources” objects. idaifield_as_matrix() now returns matrix character values, lists Dimension lists imported single value - still stupid, actually, can’t currently think better way. Two Vignettes: Demo.Rmd essential workflow, .Rmd explaining bit . Demo.Rmd updated begin working . stated don’t intend structural changes, - apparently - impossible. Old scripts work without interference new version.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/news/index.html","id":"idaifieldr-014-2021-05-09","dir":"Changelog","previous_headings":"","what":"idaifieldR 0.1.4 2021-05-09","title":"idaifieldR 0.1.4 2021-05-09","text":"add version connect_idaifield()-function since options changed switch Field Desktop (iDAI.field 3) update documentation accordingly","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/news/index.html","id":"idaifieldr-013-2021-12-07","dir":"Changelog","previous_headings":"","what":"idaifieldR 0.1.3 2021-12-07","title":"idaifieldR 0.1.3 2021-12-07","text":"Updated docs Changes geometry reformatting accommodate 3D-data (available, set 0)","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/news/index.html","id":"idaifieldr-011-2021-04-13","dir":"Changelog","previous_headings":"","what":"idaifieldR 0.1.1 2021-04-13","title":"idaifieldR 0.1.1 2021-04-13","text":"First release. try limit future changes affect structural outcome core functions now. TODOs: * Find way handle remaining lists better, esp combination non-list columns. * Try assign column type automatically (numeric numbers etc.) * deal dimension…-fields (measurements)? Currently ignored, can flattened dplyr friends.","code":""},{"path":"https://lsteinmann.github.io/idaifieldR/news/index.html","id":"idaifieldr-010-2021-03-03","dir":"Changelog","previous_headings":"","what":"idaifieldR 0.1.0 2021-03-03","title":"idaifieldR 0.1.0 2021-03-03","text":"Added NEWS.md file track changes package. Basic functions work thoroughly tested","code":""}]
